stuff to do
every package for have its own section, related packages should near each other
use ----name---- to denote a package

NOTES:
please don't count to much (but include some) time on research in the time it took to complete
research is an important use of time however it is technically not completely part of the project
recommend only recording about 20% of your research time in time taken to complete

layout
[num] - [thing to do] : [short desc] ([date completed] : [est time taken])
1 - make to do : create and fill the to-do list (5/8/19 : 15 min)

----GUI to-do---- OLD , GUI needs to rewritten.
creates and runs the gui
1 - proto gui : create a prototype gui to demo (5/9/19 : 4 hr)
2 - create refined layout : iron our issues and make it look nicer (not done)
3 - add functionality for prototype : make some buttons work (not done)
4 - add color to important buttons : add color to important buttons (not done)
5 - add labels : add labels to areas that need them (not done)
6 - add function buttons : add the col of function buttons (5/9/19 : 15min)
7 - add labels to func : add proper labels to func buttons (not done)
8 - add functionality : make the func buttons work (not done)
9 - Change Item list : make item list a stack pane so that items can layered depending on options (4/11/19 : 1.5hr)

----GUI NEW----
new gui written to handle the register class also uses final layouts and proper styling
1 - recreate old gui layout (5/14/19 : 2 hrs)
2 - find a button look (done)
3 - confirm a style (done)
4 - create a add item UI (done)
5 -  make item list into a scroll view or make it paged
6 - finish add item
7 - add sides
8 - implement the stuff for sorting the menu into sections
9 - *IMPORTANT* A memory leak in GUIFinal will cause a fatal error eventually and the program will lock up indefinitely or crash
     for testing it is ok however for the final version of the app the memory leak will need to be traced and taken care of
     otherwise the program will need to be restarted several times during normal usage

----Main to-do----
runs the application, starts all the classes
1 - create layout diagram : make the layout diagram for Main (not done)
2 - create way to launch program without intellJ, batch file? (not done)
3 - set up

----Register Runner to-do----
Runs the register program, handles prices, totals
    *NOTE* Register for testing purposes just contain a list of all foods, unless FoodBd is written before this class
    Translist should have a list of Food Objects
1 - create layout (not done)
2 - make the classes (not done)
3 - constructor function (done)
4 - add item to trans (done)
5 - remove last item from trans (done)
6 - remove any item from trans
7 - adjust last order (done)
8 - adjust any order
9 - when a value changes the class needs to tell the gui that something has changed
    *NOTE* we will not being using the standard model view controller layout, instead using a custom more complicated but more efficient system
    where instead of the gui checking every object, the register will specify what to update limited the refreshes and RAM usage
10 - get total
11 - cashout, must handle partial payments and distinguish between credit and cash (done)
12 - manual entry of a price (done)
13 - tell the gui what food and toppings to use (done)
14 - handle several food db
15 - handle current access level


----Food DataBase to-do----
stores all the prices and needed information about food
1 - create layout (not done)
2 - create classes (not done)

----Main DataBase----

----Topping DataBase----

----Logger to-do----
logs everything the system does, outputs to a text file and outputs to LEDs about system status
1 - create layout (not done)
2 - create classes (not done)

----Item----
an abstract class that all items inherit from
1 - create class, make the abstract class (5/12/19 : 10min)
2 - add functions, add the functions and implement the ones that need to be implemented (5/12/19 : 10min)
3 - need to add a copy function , when adding to trans list object need to be new instances of item (done)

----Basic Food----
extends item, add prices and the functions to go with prices
1 - create class, make the class and extend from Item (5/12/19 : 5min)
2 - add the functions (5/12/19 : 20 min)
3 - add the sides list, and functions to go with the list (not done)
4 - change price to handle sides as well (not done)
5 - add copy (done)

----adjustable food----
extends basic foods, this item has toppings. both normal toppings and can add toppings
1 - create class, make class (5/12/19 : 5min)
2 - add the functions, add the topping list and functions needed for the this (5/12/19 : 30min)
3 - add copy (done)


----Topping----
1 - create class, extend Item (5/12/19 : 5min)
2 - add functions (5/12/19 : 20 min)
3 - handle light, regular and extra (5/12/19 : 10 min)
4 - handle no topping (5/12/19 : 5 min)
5 - add copy (done)
6 - Make amount an ENUM (done)
7 - Toppings have a type (done)
    *NOTE* can be booleans, using enums would messy as there are lot of combinations to account for

----function----
a class meant for the functions, this class if an abstract as each function will be its own class that does a specified task
    *NOTE* may just hard code functions rather than make a complicated system of classes for handling special functions




